// Post related models
model Post {
    id        String    @id @default(uuid())
    text      String?
    media     Json?
    isPinned  Boolean   @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    groupId String?
    group   Group?   @relation("GroupPosts", fields: [groupId], references: [id])
    pageId  String?
    page    Page?    @relation("PagePosts", fields: [pageId], references: [id])
    address Address? // Renamed from postAddresses for consistency

    comments    Comment[]
    reactions   Reaction[]
    tags        Tag[]
    bookmarks   Bookmark[]
    reports     Report[]
    postHistory PostHistory[]

    @@index([groupId])
    @@index([pageId])
    @@map("posts")
}

model Comment {
    id    String  @id @default(uuid())
    text  String?
    media Json?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    authorId String
    author   User     @relation(fields: [authorId], references: [id])
    postId   String
    post     Post     @relation(fields: [postId], references: [id])
    parentId String?
    parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])

    replies        Comment[]        @relation("CommentReplies")
    reactions      Reaction[]
    tags           Tag[]
    reports        Report[]
    commentHistory CommentHistory[]

    @@index([authorId])
    @@index([postId])
    @@index([parentId])
    @@map("comments")
}

model Reaction {
    id        String    @id @default(uuid())
    emoji     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    userId          String
    user            User              @relation(fields: [userId], references: [id])
    postId          String?
    post            Post?             @relation(fields: [postId], references: [id])
    commentId       String?
    comment         Comment?          @relation(fields: [commentId], references: [id])
    reactionHistory ReactionHistory[]

    @@unique([userId, postId, commentId])
    @@index([userId])
    @@index([postId])
    @@index([commentId])
    @@map("reactions")
}

model Bookmark {
    id     String @id @default(uuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    deletedAt       DateTime?
    bookmarkHistory BookmarkHistory[]

    @@unique([userId, postId])
    @@map("bookmarks")
}

// History table for Post
model PostHistory {
    id        String    @id @default(uuid())
    postId    String
    text      String?
    media     Json?
    isPinned  Boolean?
    createdAt DateTime?
    updatedAt DateTime?
    deletedAt DateTime?

    groupId String?
    pageId  String?

    post Post @relation(fields: [postId], references: [id])

    @@index([postId])
    @@map("post_histories")
}

// History table for Comment
model CommentHistory {
    id        String  @id @default(uuid())
    commentId String
    text      String?
    media     Json?

    createdAt DateTime?
    updatedAt DateTime?
    deletedAt DateTime?

    authorId String?
    postId   String?
    parentId String?

    comment Comment @relation(fields: [commentId], references: [id])

    @@index([commentId])
    @@map("comment_histories")
}

// History table for Reaction
model ReactionHistory {
    id         String    @id @default(uuid())
    reactionId String
    emoji      String?
    createdAt  DateTime?
    updatedAt  DateTime?
    deletedAt  DateTime?

    userId    String?
    postId    String?
    commentId String?

    reaction Reaction @relation(fields: [reactionId], references: [id])

    @@index([reactionId])
    @@map("reaction_histories")
}

model BookmarkHistory {
    id         String  @id @default(uuid())
    bookmarkId String
    userId     String?
    postId     String?

    createdAt DateTime?
    updatedAt DateTime?
    deletedAt DateTime?

    bookmark Bookmark @relation(fields: [bookmarkId], references: [id])

    @@map("bookmarks_histories")
}
